import asyncio
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "8091281268:AAHlyXIf4EA4pBw4xba1lajIOGGWEDUU9tU"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    await message.answer("–û —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω?")

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –≤—Ä–µ–º—è
@dp.message(F.text)
async def get_reminder_text_or_time(message: Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è
    if user_id in user_data and 'waiting_for_time' in user_data[user_id]:
        time_text = message.text.strip()
        try:
            time_obj = datetime.strptime(time_text, "%H:%M").time()
            selected_date = user_data[user_id]['date']
            reminder_dt = datetime.combine(selected_date, time_obj)

            user_data[user_id]['reminder_time'] = reminder_dt

            await message.answer(
                f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º:\nüìù *{user_data[user_id]['text']}*\nüìÖ {reminder_dt.strftime('%d.%m.%Y –≤ %H:%M')}",
                parse_mode="Markdown"
            )

            asyncio.create_task(schedule_reminder(user_id))
            del user_data[user_id]['waiting_for_time']

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30")
        return

    # –ò–Ω–∞—á–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
    user_data[user_id]['text'] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≥–æ—Å–ø–æ–¥–∏–Ω:", reply_markup=date_picker_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("date_"))
async def process_date(callback: CallbackQuery):
    user_id = callback.from_user.id
    date_str = callback.data.split("_")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    user_data[user_id]['date'] = selected_date
    user_data[user_id]['waiting_for_time'] = True

    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å, –≥–æ—Å–ø–æ–¥–∏–Ω, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
    )
    await callback.answer()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def schedule_reminder(user_id: int):
    reminder_time: datetime = user_data[user_id]['reminder_time']
    now = datetime.now()
    delay = (reminder_time - now).total_seconds()

    if delay > 0:
        await asyncio.sleep(delay)

    text = user_data[user_id]['text']
    await bot.send_message(
        user_id,
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}",
        reply_markup=remind_again_button()
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–æ–º–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑"
def remind_again_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç", callback_data="remind_again")
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(F.data == "remind_again")
async def repeat_reminder(callback: CallbackQuery):
    user_id = callback.from_user.id
    text = user_data.get(user_id, {}).get('text')

    if not text:
        await callback.answer("–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–æ —è –Ω–µ –ø–æ–º–Ω—é, –æ —á—ë–º –Ω—É–∂–Ω–æ –±—ã–ª–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å.")
        return

    await callback.answer("–ù–∞–ø–æ–º–Ω—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –≥–æ—Å–ø–æ–¥–∏–Ω.")
    await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
    await bot.send_message(
        user_id,
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä): {text}",
        reply_markup=remind_again_button()
    )

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏
def date_picker_keyboard():
    builder = InlineKeyboardBuilder()
    today = date.today()
    for i in range(14):  # 14 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        d = today + timedelta(days=i)
        btn_text = d.strftime("%d.%m.%Y")
        builder.button(text=btn_text, callback_data=f"date_{d.isoformat()}")
    builder.adjust(2)
    return builder.as_markup()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    dp.run_polling(bot)
