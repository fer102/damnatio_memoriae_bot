import asyncio
from datetime import datetime, timedelta, date
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "8091281268:AAHlyXIf4EA4pBw4xba1lajIOGGWEDUU9tU"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: user_id -> —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞
in_progress = {}

# /start ‚Äî –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    await message.answer("–û —á—ë–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –≥–æ—Å–ø–æ–¥–∏–Ω?")
    in_progress[user_id] = {}

# /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(Command("list"))
async def cmd_list(message: Message):
    user_id = message.from_user.id
    reminders = user_data.get(user_id, [])

    if not reminders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≥–æ—Å–ø–æ–¥–∏–Ω.")
        return

    msg = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for i, r in enumerate(reminders, 1):
        dt = r['time'].strftime('%d.%m.%Y %H:%M')
        msg += f"{i}. üï∞ {dt} ‚Äî {r['text']}\n"

    await message.answer(msg)

# /cancel ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(Command("cancel"))
async def cmd_cancel(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = []
    await message.answer("–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã, –≥–æ—Å–ø–æ–¥–∏–Ω.")

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤—Ä–µ–º—è
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id

    # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    if user_id in in_progress and 'date' in in_progress[user_id]:
        try:
            time_obj = datetime.strptime(message.text.strip(), "%H:%M").time()
            selected_date = in_progress[user_id]['date']
            reminder_dt = datetime.combine(selected_date, time_obj)
            text = in_progress[user_id]['text']

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder = {"text": text, "time": reminder_dt}
            user_data.setdefault(user_id, []).append(reminder)
            asyncio.create_task(schedule_reminder(user_id, reminder))

            await message.answer(
                f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º:\nüìù *{text}*\nüìÖ {reminder_dt.strftime('%d.%m.%Y –≤ %H:%M')}",
                parse_mode="Markdown"
            )
            del in_progress[user_id]

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30")
        return

    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    in_progress[user_id] = {'text': message.text}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≥–æ—Å–ø–æ–¥–∏–Ω:", reply_markup=date_picker_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("date_"))
async def handle_date(callback: CallbackQuery):
    user_id = callback.from_user.id
    date_str = callback.data.split("_")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    if user_id in in_progress:
        in_progress[user_id]['date'] = selected_date
        await callback.message.answer("–¢–µ–ø–µ—Ä—å, –≥–æ—Å–ø–æ–¥–∏–Ω, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await callback.answer()

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def schedule_reminder(user_id: int, reminder: dict):
    delay = (reminder['time'] - datetime.now()).total_seconds()
    if delay > 0:
        await asyncio.sleep(delay)

    await bot.send_message(
        user_id,
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}",
        reply_markup=remind_again_button(reminder)
    )

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
def remind_again_button(reminder):
    builder = InlineKeyboardBuilder()
    time_str = reminder['time'].isoformat()
    builder.button(
        text="üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç",
        callback_data=f"remind_again|{time_str}"
    )
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("remind_again"))
async def handle_repeat(callback: CallbackQuery):
    user_id = callback.from_user.id
    _, time_str = callback.data.split("|")

    dt = datetime.fromisoformat(time_str)
    reminder_list = user_data.get(user_id, [])
    found = next((r for r in reminder_list if r['time'] == dt), None)

    if found:
        await callback.answer("–ù–∞–ø–æ–º–Ω—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –≥–æ—Å–ø–æ–¥–∏–Ω.")
        await asyncio.sleep(600)
        await bot.send_message(
            user_id,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–≤—Ç–æ—Ä): {found['text']}",
            reply_markup=remind_again_button(found)
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 14 –¥–Ω–µ–π
def date_picker_keyboard():
    builder = InlineKeyboardBuilder()
    today = date.today()
    for i in range(14):
        d = today + timedelta(days=i)
        builder.button(text=d.strftime("%d.%m.%Y"), callback_data=f"date_{d.isoformat()}")
    builder.adjust(2)
    return builder.as_markup()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="list", description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
        BotCommand(command="cancel", description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    async def main():
        await set_bot_commands()
        await dp.start_polling(bot)

    asyncio.run(main())
